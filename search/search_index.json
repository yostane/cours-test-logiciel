{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Bienvenue au cours: Test logiciel","text":""},{"location":"#ressources-et-liens-utiles","title":"Ressources et liens utiles","text":"<ul> <li>Software testing par IBM</li> <li>Test et Validation du Logiciel (LaBRI)</li> </ul>"},{"location":"#license","title":"License","text":"<ul> <li>Ce support de cours est disponible sous licence Creative Commons Attribution 4.0 International (CC BY 4.0): </li> <li>Logo g\u00e9n\u00e9r\u00e9 par https://hotpot.ai/</li> </ul>"},{"location":"generalites/","title":"G\u00e9n\u00e9ralit\u00e9s","text":""},{"location":"generalites/#definition","title":"D\u00e9finition","text":"<p>IBM</p> <p>Le test logiciel est le processus qui consiste \u00e0 \u00e9valuer et \u00e0 v\u00e9rifier qu'un produit ou une application logicielle fait ce qu'il ou elle est cens\u00e9(e) faire.</p> <p>Les avantages des tests, toujours selon IBM</p> <p>Les avantages du test comprennent la pr\u00e9vention des bogues, la r\u00e9duction des co\u00fbts de d\u00e9veloppement et l'am\u00e9lioration des performances.</p>"},{"location":"generalites/#classification-des-tests","title":"Classification des tests","text":"<p>Il est compliqu\u00e9 de trouver une classification universelle des tests logicielles. Dans la suite, je compile quelques classifications propos\u00e9es par diff\u00e9rentes sources.</p>"},{"location":"generalites/#differents-types-de-tests","title":"Diff\u00e9rents types de tests","text":"<p>Source atlassian</p> <p>Voici quelques types de tests sans classification particuli\u00e8re:</p> <ul> <li>Tests unitaires</li> <li>Tests d'int\u00e9gration</li> <li>Tests fonctionnels</li> <li>Tests de bout en bout</li> <li>Tests d'acceptation</li> <li>Tests de performance</li> <li>Smoke tests</li> </ul>"},{"location":"generalites/#pyramide-des-tests-par-niveau","title":"Pyramide des tests par niveau","text":"<p>Source all4test</p> <ul> <li>Les tests unitaires</li> <li>Les tests d\u2019int\u00e9gration</li> <li>Les tests syst\u00e8mes</li> <li>Les tests d\u2019acceptation</li> </ul>"},{"location":"generalites/#classification-selon-la-nature","title":"Classification selon la nature","text":"<p>Source all4test</p> <ul> <li>Tests fonctionnels</li> <li>Tests non fonctionnels, quelques exemples:<ul> <li>Les tests de robustesse</li> <li>Les tests de performance</li> <li>Les tests de mont\u00e9e en charge</li> <li>Les tests de compatibilit\u00e9 de plateforme</li> <li>Les tests d\u2019ergonomie</li> <li>Les tests d\u2019interface graphique</li> <li>Les tests de s\u00e9curit\u00e9</li> </ul> </li> </ul>"},{"location":"generalites/#tests-manuels-ou-automatises","title":"Tests manuels ou automatis\u00e9s ?","text":"<p>Source atlassian</p> <p>Les tests manuels sont effectu\u00e9s par des humains tandis que les tests automatis\u00e9es sont effectu\u00e9es par un logiciel.</p>"},{"location":"librairies/","title":"Quelques librairies de tests","text":"<p>SQLite est r\u00e9put\u00e9 pour avoir une proportion importante de tests.</p>"},{"location":"librairies/#junit","title":"JUnit","text":"<p>Framework de test Java permet de tester son code via des assertions. Explorons le projet de d\u00e9marrage fourni par le guide officiel</p>"},{"location":"librairies/#exercices","title":"Exercices","text":"<ol> <li>Ecrire un test unitaire <code>StringTest</code> qui test ces m\u00e9thodes de la classe <code>String</code>: <code>toUpperCase()</code>, <code>toLowerCase()</code> et <code>charAt()</code>.</li> <li>Exo 2 de cette s\u00e9rie<ul> <li>Ignorer les CE invalides b5 et b6</li> </ul> </li> <li>Exercice 2 de cette s\u00e9rie qui n\u00e9cessite d'abord de faire d'abord ces exercices: partie1, partie2</li> <li>Cet exo de librecours.net. Le code est \u00e0 traduire du JS vers du Java.</li> <li>Cet exercice de librecours.net. Le code est \u00e0 traduire du JS vers du Java.</li> <li>Ce TD qui provient de labri. Le <code>makefile</code> est l'\u00e9quivalent de <code>maven</code> pour nous. Faire la question 3 avec cette commande \u00e0 la place de l'outil propos\u00e9 <code>mvn surefire-report:report</code>.</li> </ol> Quelques <ol> <li>R\u00e0S</li> <li>Fonctions corriger / modifier: <code>checkDay</code>, <code>checkYear</code>, <code>checkDayLimits</code>, renommer ou enlever <code>maxDayOfMonth(month)</code>, <code>testFebruaryValidLimitDates</code>, <code>testValidLimitDates</code></li> </ol>"},{"location":"librairies/#tests-dans-un-projet-spring-mvc","title":"Tests dans un projet Spring MVC","text":""},{"location":"librairies/#api-rest-sans-base-de-donnees","title":"API REST sans base de donn\u00e9es","text":"<ul> <li>G\u00e9n\u00e9rer un projet Spring avec initializr, en choisissant les d\u00e9pendances suivantes: Spring Web et Spring Boot DevTools.</li> <li>Ouvrir le projet sur VSCode</li> <li>Cr\u00e9er un <code>@RestController</code> avec deux routes en @GET et en @POST, un mod\u00e8le et un service qui g\u00e8re une liste statique en m\u00e9moire.<ul> <li>Je vous propose d'utiliser comme mod\u00e8le une classe <code>Manga</code> avec trois champs <code>ISBN</code>, <code>name</code> et <code>nbPages</code></li> </ul> </li> <li>Lancer votre serveur et v\u00e9rifier qu'il fonctionne avec la bonne commande (avec gradle <code>./gradlew bootRun</code>, avec maven <code>./mvnw springboot:run</code>) ou depuis votre IDE</li> <li>Ecrire des tests unitaires pour le service</li> <li>Spring propose deux fa\u00e7ons de tester le contr\u00f4leur (en d'autres termes l'API REST).<ul> <li>En lan\u00e7ant un serveur web (avec la stack HTTP compl\u00e8te) via la classe <code>TestRestTemplate</code></li> <li>En lan\u00e7ant un serveur bouchonn\u00e9 (on n'a pas la stack HTTP compl\u00e8te) via la classe <code>MockMVC</code></li> </ul> </li> <li>Ecrire des tests pour le contr\u00f4leur</li> </ul>"},{"location":"librairies/#api-rest-avec-une-base-de-donnees","title":"API REST avec une base de donn\u00e9es","text":"<p>Nous allons utiliser la BDD H2 pour sa simplicit\u00e9 car c'est une BDD relationnelle (SQL) qui ne n\u00e9cessite pas de serveur et r\u00e9side en m\u00e9moire (RAM) par d\u00e9faut.</p> <ul> <li>G\u00e9n\u00e9rer un projet Spring avec le cr\u00e9ateur en ligne en choisissant les d\u00e9pendances suivantes: Spring Data JPA, H2 Database, Spring Boot DevTool et Spring Web.</li> <li>Ouvrir le projet sur VSCode</li> <li>Cr\u00e9er une classe \"Model\" avec l'annotation <code>@Entity</code> et les annotations <code>@Id</code> et <code>@GeneratedValue</code> sur sa cl\u00e9 primaire.</li> <li>Cr\u00e9er une interface <code>xxxxRepository: JpaRepository&lt;Product, Long&gt;</code> o\u00f9 xxx est le nom de votre mod\u00e8le</li> <li>Cr\u00e9er un contr\u00f4leur avec les routes en @GET, @POST, PUT et DELETE, un mod\u00e8le et un service qui g\u00e8re communique avec votre repository</li> </ul>"},{"location":"librairies/#liens-et-references","title":"Liens et r\u00e9f\u00e9rences","text":"<ul> <li>http://deptinfo.cnam.fr/~graffion/UES/GLG101/tps/java/index.html</li> <li>https://gayerie.dev/docs/testing/test/junit.html</li> <li>https://github.com/mjeanroy/exercices-java/blob/master/exercices-junit.txt</li> </ul>"},{"location":"projet/","title":"Projet","text":"<p>Choisir un sujet et r\u00e9aliser une pr\u00e9sentation abordant les points suivants:</p> <ul> <li>d\u00e9finition</li> <li>Solutions alternatives ou similaires</li> <li>avantages / inconv\u00e9nients</li> <li>D\u00e9mo en direct ou enregistr\u00e9e sinon (la d\u00e9mo en direct sera pr\u00e9f\u00e9r\u00e9e)</li> </ul> <p>Sujets:</p> <ul> <li>TDD</li> <li>Les 3 mieux not\u00e9s Actions GitHub d'int\u00e9gration avec Discord et leur utilit\u00e9 (ou non) dans le cadre des tests</li> <li>Outil testquality et int\u00e9gration avec GitHub</li> <li>appium</li> <li>JIRA vs YouTrack</li> <li>SonarQube et son utilit\u00e9 pour les tests</li> <li>Tests de performance</li> <li>TestContainers</li> </ul>"}]}